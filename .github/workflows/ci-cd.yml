name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-version:
    name: Generate Version Information
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-number: ${{ steps.version.outputs.build-number }}
      full-version: ${{ steps.version.outputs.full-version }}
      release-name: ${{ steps.version.outputs.release-name }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch full history for accurate version calculation
    
    - name: Generate Version
      id: version
      run: |
        # Get the base version from pubspec.yaml
        BASE_VERSION=$(grep "^version:" pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
        
        # Get current date for build metadata
        BUILD_DATE=$(date +"%Y%m%d")
        
        # Check if this is a tagged release
        if git describe --exact-match --tags HEAD 2>/dev/null; then
          # This is a tagged release
          TAG=$(git describe --exact-match --tags HEAD)
          VERSION=${TAG#v}  # Remove 'v' prefix if present
          BUILD_NUMBER=$(git rev-list --count HEAD)
          FULL_VERSION="${VERSION}+${BUILD_NUMBER}"
          RELEASE_NAME="Release ${VERSION}"
        else
          # This is a development build
          COMMIT_COUNT=$(git rev-list --count HEAD)
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            # Main branch - use base version with build metadata
            VERSION="${BASE_VERSION}-dev.${COMMIT_COUNT}"
            BUILD_NUMBER="${COMMIT_COUNT}"
            FULL_VERSION="${VERSION}+${BUILD_NUMBER}.${SHORT_SHA}.${BUILD_DATE}"
            RELEASE_NAME="Development Build ${BASE_VERSION}-dev.${COMMIT_COUNT}"
          else
            # Feature branch - include branch name
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            VERSION="${BASE_VERSION}-${BRANCH_NAME}.${COMMIT_COUNT}"
            BUILD_NUMBER="${COMMIT_COUNT}"
            FULL_VERSION="${VERSION}+${BUILD_NUMBER}.${SHORT_SHA}.${BUILD_DATE}"
            RELEASE_NAME="Branch Build ${BRANCH_NAME} ${BASE_VERSION}"
          fi
        fi
        
        echo "Generated version information:"
        echo "  Version: ${VERSION}"
        echo "  Build Number: ${BUILD_NUMBER}"
        echo "  Full Version: ${FULL_VERSION}"
        echo "  Release Name: ${RELEASE_NAME}"
        
        # Set outputs for other jobs
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "build-number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        echo "full-version=${FULL_VERSION}" >> $GITHUB_OUTPUT
        echo "release-name=${RELEASE_NAME}" >> $GITHUB_OUTPUT

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.0'
        channel: 'stable'
        cache: true
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
    
    - name: Analyze project source
      run: flutter analyze --fatal-infos
    
    - name: Run tests
      run: flutter test --coverage
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: coverage/lcov.info
        name: codecov-umbrella
        fail_ci_if_error: false

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: [test, generate-version]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.0'
        channel: 'stable'
        cache: true
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Build APK with Version
      run: |
        flutter build apk --release \
          --build-name="${{ needs.generate-version.outputs.version }}" \
          --build-number="${{ needs.generate-version.outputs.build-number }}" \
          --dart-define=APP_VERSION="${{ needs.generate-version.outputs.full-version }}" \
          --dart-define=BUILD_NAME="${{ needs.generate-version.outputs.version }}" \
          --dart-define=BUILD_NUMBER="${{ needs.generate-version.outputs.build-number }}" \
          --dart-define=GIT_COMMIT="${{ github.sha }}" \
          --dart-define=BUILD_DATE="$(date -u +%Y-%m-%d)"
    
    - name: Rename APK with Version
      run: |
        mv build/app/outputs/flutter-apk/app-release.apk \
           build/app/outputs/flutter-apk/canbussy-${{ needs.generate-version.outputs.version }}-android.apk
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-${{ needs.generate-version.outputs.version }}
        path: build/app/outputs/flutter-apk/canbussy-${{ needs.generate-version.outputs.version }}-android.apk
        retention-days: 30

  build-windows:
    name: Build Windows App
    runs-on: windows-latest
    needs: [test, generate-version]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.0'
        channel: 'stable'
        cache: true
    
    - name: Enable Windows Desktop
      run: flutter config --enable-windows-desktop
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Build Windows App with Version
      run: |
        flutter build windows --release `
          --build-name="${{ needs.generate-version.outputs.version }}" `
          --build-number="${{ needs.generate-version.outputs.build-number }}" `
          --dart-define=APP_VERSION="${{ needs.generate-version.outputs.full-version }}" `
          --dart-define=BUILD_NAME="${{ needs.generate-version.outputs.version }}" `
          --dart-define=BUILD_NUMBER="${{ needs.generate-version.outputs.build-number }}" `
          --dart-define=GIT_COMMIT="${{ github.sha }}" `
          --dart-define=BUILD_DATE="$(Get-Date -Format 'yyyy-MM-dd')"
      shell: powershell
    
    - name: Create Windows Archive with Version
      run: |
        $version = "${{ needs.generate-version.outputs.version }}"
        $archiveName = "canbussy-$version-windows.zip"
        Compress-Archive -Path "build\windows\x64\runner\Release\*" -DestinationPath "build\windows\$archiveName"
      shell: powershell
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-app-${{ needs.generate-version.outputs.version }}
        path: build/windows/canbussy-${{ needs.generate-version.outputs.version }}-windows.zip
        retention-days: 30

  build-web:
    name: Build Web App
    runs-on: ubuntu-latest
    needs: [test, generate-version]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.0'
        channel: 'stable'
        cache: true
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Build Web App with Version
      run: |
        flutter build web --release \
          --build-name="${{ needs.generate-version.outputs.version }}" \
          --build-number="${{ needs.generate-version.outputs.build-number }}" \
          --dart-define=APP_VERSION="${{ needs.generate-version.outputs.full-version }}" \
          --dart-define=BUILD_NAME="${{ needs.generate-version.outputs.version }}" \
          --dart-define=BUILD_NUMBER="${{ needs.generate-version.outputs.build-number }}" \
          --dart-define=GIT_COMMIT="${{ github.sha }}" \
          --dart-define=BUILD_DATE="$(date -u +%Y-%m-%d)"
    
    - name: Create Web Archive with Version
      run: |
        cd build/web
        tar -czf ../canbussy-${{ needs.generate-version.outputs.version }}-web.tar.gz .
    
    - name: Upload Web artifact
      uses: actions/upload-artifact@v4
      with:
        name: web-app-${{ needs.generate-version.outputs.version }}
        path: build/canbussy-${{ needs.generate-version.outputs.version }}-web.tar.gz
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.0'
        channel: 'stable'
        cache: true
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Run dependency vulnerability scan
      run: flutter pub deps --json | dart pub global run pana --json
      continue-on-error: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-android, build-windows, build-web, generate-version]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Version: ${{ needs.generate-version.outputs.full-version }}"
        # Add your staging deployment commands here

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-android, build-windows, build-web, generate-version]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.generate-version.outputs.version }}
        release_name: ${{ needs.generate-version.outputs.release-name }}
        draft: false
        prerelease: false
        body: |
          ## ${{ needs.generate-version.outputs.release-name }}
          
          **Version:** `${{ needs.generate-version.outputs.full-version }}`
          **Commit:** `${{ github.sha }}`
          
          ### 🚀 Features
          - Cross-platform WiFi scanning and connection
          - Real-time data streaming capabilities
          - Save functionality for stream data
          - Professional logging system
          - Auto-format git hooks
          
          ### 📱 Supported Platforms
          - 🤖 **Android APK** - Install on Android devices
          - 🪟 **Windows Desktop** - Extract and run on Windows
          - 🌐 **Web Application** - Deploy to web servers
          
          ### 📦 Downloads
          Choose the appropriate package for your platform below.
          
          ### 🔧 Installation
          - **Android:** Download and install the APK file
          - **Windows:** Download, extract ZIP, and run the executable
          - **Web:** Extract tar.gz and serve with a web server
    
    - name: Upload Android APK to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./android-apk-${{ needs.generate-version.outputs.version }}/canbussy-${{ needs.generate-version.outputs.version }}-android.apk
        asset_name: canbussy-${{ needs.generate-version.outputs.version }}-android.apk
        asset_content_type: application/vnd.android.package-archive
    
    - name: Upload Windows App to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows-app-${{ needs.generate-version.outputs.version }}/canbussy-${{ needs.generate-version.outputs.version }}-windows.zip
        asset_name: canbussy-${{ needs.generate-version.outputs.version }}-windows.zip
        asset_content_type: application/zip
    
    - name: Upload Web App to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./web-app-${{ needs.generate-version.outputs.version }}/canbussy-${{ needs.generate-version.outputs.version }}-web.tar.gz
        asset_name: canbussy-${{ needs.generate-version.outputs.version }}-web.tar.gz
        asset_content_type: application/gzip
